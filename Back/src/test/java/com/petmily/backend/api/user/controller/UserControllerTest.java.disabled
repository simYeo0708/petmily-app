package com.petmily.backend.api.user.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.petmily.backend.api.user.dto.ChangePasswordRequest;
import com.petmily.backend.api.user.dto.UserUpdateRequest;
import com.petmily.backend.api.user.service.UserService;
import com.petmily.backend.domain.user.entity.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(UserController.class)
@ExtendWith(MockitoExtension.class)
class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserService userService;

    @Autowired
    private ObjectMapper objectMapper;

    private User mockUser;
    private UserUpdateRequest mockUpdateRequest;
    private ChangePasswordRequest mockChangePasswordRequest;
    private List<User> mockUserList;
    private static final Long USER_ID = 1L;
    private static final String USERNAME = "testuser";

    @BeforeEach
    void setUp() {
        // Mock User entity
        mockUser = User.builder()
                .id(USER_ID)
                .username(USERNAME)
                .name("Test User")
                .email("test@example.com")
                .phone("010-1234-5678")
                .roadAddress("Test Road Address")
                .addressDetail("Test Address Detail")
                .zipCode("12345")
                .build();

        // Mock UserUpdateRequest
        mockUpdateRequest = new UserUpdateRequest();
        mockUpdateRequest.setName("Updated User");
        mockUpdateRequest.setEmail("updated@example.com");
        mockUpdateRequest.setPhone("010-9876-5432");
        mockUpdateRequest.setRoadAddress("Updated Road Address");
        mockUpdateRequest.setAddressDetail("Updated Address Detail");
        mockUpdateRequest.setZipCode("54321");

        // Mock ChangePasswordRequest
        mockChangePasswordRequest = new ChangePasswordRequest();
        mockChangePasswordRequest.setOldPassword("oldPassword123");
        mockChangePasswordRequest.setNewPassword("newPassword123");

        // Mock User list
        mockUserList = Arrays.asList(mockUser);
    }

    @Test
    @WithMockUser
    void getUserById_Success() throws Exception {
        // Given
        when(userService.getUserById(USER_ID)).thenReturn(mockUser);

        // When & Then
        mockMvc.perform(get("/api/users/{id}", USER_ID)
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(USER_ID))
                .andExpect(jsonPath("$.username").value(USERNAME))
                .andExpect(jsonPath("$.name").value("Test User"))
                .andExpect(jsonPath("$.email").value("test@example.com"))
                .andExpect(jsonPath("$.phone").value("010-1234-5678"));

        verify(userService).getUserById(USER_ID);
    }

    @Test
    @WithMockUser
    void getUserById_NotFound() throws Exception {
        // Given
        when(userService.getUserById(USER_ID)).thenThrow(new RuntimeException("User not found"));

        // When & Then
        mockMvc.perform(get("/api/users/{id}", USER_ID)
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(userService).getUserById(USER_ID);
    }

    @Test
    @WithMockUser
    void getAllUsers_Success() throws Exception {
        // Given
        when(userService.getAllUsers()).thenReturn(mockUserList);

        // When & Then
        mockMvc.perform(get("/api/users/all")
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(1))
                .andExpect(jsonPath("$[0].id").value(USER_ID))
                .andExpect(jsonPath("$[0].username").value(USERNAME));

        verify(userService).getAllUsers();
    }

    @Test
    @WithMockUser
    void updateUser_Success() throws Exception {
        // Given
        User updatedUser = User.builder()
                .id(USER_ID)
                .username(USERNAME)
                .name("Updated User")
                .email("updated@example.com")
                .build();
        when(userService.updateUser(any(UserUpdateRequest.class), eq(USER_ID)))
                .thenReturn(updatedUser);

        // When & Then
        mockMvc.perform(put("/api/users/{id}", USER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockUpdateRequest))
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(USER_ID))
                .andExpect(jsonPath("$.name").value("Updated User"))
                .andExpect(jsonPath("$.email").value("updated@example.com"));

        verify(userService).updateUser(any(UserUpdateRequest.class), eq(USER_ID));
    }

    @Test
    @WithMockUser(username = USERNAME)
    void getCurrentUser_Success() throws Exception {
        // Given
        when(userService.getCurrentUser(USERNAME)).thenReturn(mockUser);

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(get("/api/users/me")
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(USER_ID))
                    .andExpect(jsonPath("$.username").value(USERNAME))
                    .andExpect(jsonPath("$.name").value("Test User"));
        }

        verify(userService).getCurrentUser(USERNAME);
    }

    @Test
    @WithMockUser(username = USERNAME)
    void updateCurrentUser_Success() throws Exception {
        // Given
        User updatedUser = User.builder()
                .id(USER_ID)
                .username(USERNAME)
                .name("Updated User")
                .email("updated@example.com")
                .build();
        when(userService.updateCurrentUser(eq(USERNAME), any(UserUpdateRequest.class)))
                .thenReturn(updatedUser);

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(put("/api/users/me")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockUpdateRequest))
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(USER_ID))
                    .andExpect(jsonPath("$.name").value("Updated User"))
                    .andExpect(jsonPath("$.email").value("updated@example.com"));
        }

        verify(userService).updateCurrentUser(eq(USERNAME), any(UserUpdateRequest.class));
    }

    @Test
    @WithMockUser(username = USERNAME)
    void changePassword_Success() throws Exception {
        // Given
        doNothing().when(userService).changePassword(eq(USERNAME), any(ChangePasswordRequest.class));

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(put("/api/users/me/password")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockChangePasswordRequest))
                            .with(csrf()))
                    .andExpect(status().isOk());
        }

        verify(userService).changePassword(eq(USERNAME), any(ChangePasswordRequest.class));
    }

    @Test
    @WithMockUser(username = USERNAME)
    void changePassword_InvalidRequest() throws Exception {
        // Given
        ChangePasswordRequest invalidRequest = new ChangePasswordRequest();
        // Empty request

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(put("/api/users/me/password")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(invalidRequest))
                            .with(csrf()))
                    .andExpect(status().isOk()); // Controller doesn't validate - service layer does
        }

        verify(userService).changePassword(eq(USERNAME), any(ChangePasswordRequest.class));
    }

    @Test
    void getUserById_Unauthorized() throws Exception {
        // When & Then
        mockMvc.perform(get("/api/users/{id}", USER_ID)
                        .with(csrf()))
                .andExpect(status().isUnauthorized());

        verify(userService, never()).getUserById(any());
    }

    @Test
    void getAllUsers_Unauthorized() throws Exception {
        // When & Then
        mockMvc.perform(get("/api/users/all")
                        .with(csrf()))
                .andExpect(status().isUnauthorized());

        verify(userService, never()).getAllUsers();
    }

    @Test
    void updateUser_WithoutCsrf_Forbidden() throws Exception {
        // When & Then
        mockMvc.perform(put("/api/users/{id}", USER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockUpdateRequest)))
                .andExpect(status().isForbidden());

        verify(userService, never()).updateUser(any(), any());
    }

    @Test
    @WithMockUser(username = USERNAME)
    void changePassword_ServiceError() throws Exception {
        // Given
        doThrow(new RuntimeException("Wrong old password"))
                .when(userService).changePassword(eq(USERNAME), any(ChangePasswordRequest.class));

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(put("/api/users/me/password")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockChangePasswordRequest))
                            .with(csrf()))
                    .andExpect(status().isInternalServerError());
        }

        verify(userService).changePassword(eq(USERNAME), any(ChangePasswordRequest.class));
    }
}