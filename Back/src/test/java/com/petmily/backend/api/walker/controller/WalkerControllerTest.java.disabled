package com.petmily.backend.api.walker.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.petmily.backend.api.walker.dto.walker.*;
import com.petmily.backend.api.walker.service.WalkerService;
import com.petmily.backend.domain.walker.entity.WalkerStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(WalkerController.class)
@ExtendWith(MockitoExtension.class)
class WalkerControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private WalkerService walkerService;

    @Autowired
    private ObjectMapper objectMapper;

    private WalkerCreateRequest mockCreateRequest;
    private WalkerUpdateRequest mockUpdateRequest;
    private WalkerResponse mockProfileResponse;
    private WalkerSearchRequest mockSearchRequest;
    private List<WalkerResponse> mockProfileList;

    private static final Long WALKER_ID = 1L;
    private static final String USERNAME = "testwalker";

    @BeforeEach
    void setUp() {
        // Mock WalkerCreateRequest
        mockCreateRequest = new WalkerCreateRequest();
        mockCreateRequest.setBio("Experienced dog walker with 5 years of experience");
        mockCreateRequest.setExperience("5+ years with dogs of all sizes");
        mockCreateRequest.setAvailableTime("Mon-Fri 9-17, Weekends 10-16");
        mockCreateRequest.setServiceArea("Gangnam-gu, Seoul");

        // Mock WalkerUpdateRequest
        mockUpdateRequest = new WalkerUpdateRequest();
        mockUpdateRequest.setBio("Updated bio: Expert dog walker");
        mockUpdateRequest.setExperience("Updated: 6+ years experience");
        mockUpdateRequest.setAvailableTime("Updated: Mon-Sun 8-18");
        mockUpdateRequest.setServiceArea("Gangnam-gu, Seocho-gu");

        // Mock WalkerResponse
        mockProfileResponse = WalkerResponse.builder()
                .id(WALKER_ID)
                .userId(1L)
                .username(USERNAME)
                .name("Test Walker")
                .bio("Experienced dog walker with 5 years of experience")
                .experience("5+ years with dogs of all sizes")
                .status(WalkerStatus.ACTIVE)
                .rating(4.5)
                .hourlyRate(25.0)
                .location("Gangnam-gu, Seoul")
                .isAvailable(true)
                .build();

        // Mock WalkerSearchRequest
        mockSearchRequest = new WalkerSearchRequest();
        mockSearchRequest.setServiceArea("Gangnam-gu");
        mockSearchRequest.setExperienceLevel("EXPERT");
        mockSearchRequest.setMinRating(4.0);
        mockSearchRequest.setUserLatitude(37.5665);
        mockSearchRequest.setUserLongitude(126.9780);

        // Mock profile list
        mockProfileList = Arrays.asList(mockProfileResponse);
    }

    @Test
    @WithMockUser(username = USERNAME)
    void registerWalker_Success() throws Exception {
        // Given
        when(walkerService.registerWalker(eq(USERNAME), any(WalkerCreateRequest.class)))
                .thenReturn(mockProfileResponse);

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(post("/api/walkers")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockCreateRequest))
                            .with(csrf()))
                    .andExpect(status().isCreated())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(WALKER_ID))
                    .andExpect(jsonPath("$.username").value(USERNAME))
                    .andExpect(jsonPath("$.bio").value("Experienced dog walker with 5 years of experience"))
                    .andExpect(jsonPath("$.serviceArea").value("Gangnam-gu, Seoul"))
                    .andExpect(jsonPath("$.status").value("ACTIVE"));
        }

        verify(walkerService).registerWalker(eq(USERNAME), any(WalkerCreateRequest.class));
    }

    @Test
    @WithMockUser
    void getWalkerProfile_Success() throws Exception {
        // Given
        when(walkerService.getWalkerProfile(WALKER_ID)).thenReturn(mockProfileResponse);

        // When & Then
        mockMvc.perform(get("/api/walkers/{id}", WALKER_ID)
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(WALKER_ID))
                .andExpect(jsonPath("$.username").value(USERNAME))
                .andExpect(jsonPath("$.bio").value("Experienced dog walker with 5 years of experience"))
                .andExpect(jsonPath("$.rating").value(4.5))
                .andExpect(jsonPath("$.totalWalks").value(150));

        verify(walkerService).getWalkerProfile(WALKER_ID);
    }

    @Test
    @WithMockUser
    void getWalkerProfile_NotFound() throws Exception {
        // Given
        when(walkerService.getWalkerProfile(WALKER_ID))
                .thenThrow(new RuntimeException("Walker profile not found"));

        // When & Then
        mockMvc.perform(get("/api/walkers/{id}", WALKER_ID)
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(walkerService).getWalkerProfile(WALKER_ID);
    }

    @Test
    @WithMockUser
    void getAllWalkers_Success() throws Exception {
        // Given
        when(walkerService.getAllWalkers(any(WalkerSearchRequest.class))).thenReturn(mockProfileList);

        // When & Then
        mockMvc.perform(get("/api/walkers")
                        .param("serviceArea", "Gangnam-gu")
                        .param("experienceLevel", "EXPERT")
                        .param("minRating", "4.0")
                        .param("userLatitude", "37.5665")
                        .param("userLongitude", "126.9780")
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(1))
                .andExpect(jsonPath("$[0].id").value(WALKER_ID))
                .andExpect(jsonPath("$[0].serviceArea").value("Gangnam-gu, Seoul"));

        verify(walkerService).getAllWalkers(any(WalkerSearchRequest.class));
    }

    @Test
    @WithMockUser
    void getAllWalkers_WithoutParameters_Success() throws Exception {
        // Given
        when(walkerService.getAllWalkers(any(WalkerSearchRequest.class))).thenReturn(mockProfileList);

        // When & Then
        mockMvc.perform(get("/api/walkers")
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray());

        verify(walkerService).getAllWalkers(any(WalkerSearchRequest.class));
    }

    @Test
    @WithMockUser(username = USERNAME)
    void getCurrentWalkerProfile_Success() throws Exception {
        // Given
        when(walkerService.getWalkerProfileByUsername(USERNAME)).thenReturn(mockProfileResponse);

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(get("/api/walkers/me")
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(WALKER_ID))
                    .andExpect(jsonPath("$.username").value(USERNAME))
                    .andExpect(jsonPath("$.bio").value("Experienced dog walker with 5 years of experience"));
        }

        verify(walkerService).getWalkerProfileByUsername(USERNAME);
    }

    @Test
    @WithMockUser(username = USERNAME)
    void getCurrentWalkerProfile_NotFound() throws Exception {
        // Given
        when(walkerService.getWalkerProfileByUsername(USERNAME))
                .thenThrow(new RuntimeException("Walker profile not found"));

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(get("/api/walkers/me")
                            .with(csrf()))
                    .andExpect(status().isInternalServerError());
        }

        verify(walkerService).getWalkerProfileByUsername(USERNAME);
    }

    @Test
    @WithMockUser(username = USERNAME)
    void updateCurrentWalkerProfile_Success() throws Exception {
        // Given
        WalkerResponse updatedResponse = WalkerResponse.builder()
                .id(WALKER_ID)
                .username(USERNAME)
                .bio("Updated bio: Expert dog walker")
                .experience("Updated: 6+ years experience")
                .location("Gangnam-gu, Seocho-gu")
                .build();

        when(walkerService.updateWalkerProfile(eq(USERNAME), any(WalkerUpdateRequest.class)))
                .thenReturn(updatedResponse);

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(put("/api/walkers/me")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockUpdateRequest))
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(WALKER_ID))
                    .andExpect(jsonPath("$.bio").value("Updated bio: Expert dog walker"))
                    .andExpect(jsonPath("$.experience").value("Updated: 6+ years experience"));
        }

        verify(walkerService).updateWalkerProfile(eq(USERNAME), any(WalkerUpdateRequest.class));
    }

    @Test
    @WithMockUser(username = USERNAME)
    void updateCurrentWalkerProfile_ServiceError() throws Exception {
        // Given
        when(walkerService.updateWalkerProfile(eq(USERNAME), any(WalkerUpdateRequest.class)))
                .thenThrow(new RuntimeException("Update failed"));

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(put("/api/walkers/me")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockUpdateRequest))
                            .with(csrf()))
                    .andExpect(status().isInternalServerError());
        }

        verify(walkerService).updateWalkerProfile(eq(USERNAME), any(WalkerUpdateRequest.class));
    }

    @Test
    void registerWalker_Unauthorized() throws Exception {
        // When & Then
        mockMvc.perform(post("/api/walkers")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockCreateRequest))
                        .with(csrf()))
                .andExpect(status().isUnauthorized());

        verify(walkerService, never()).registerWalker(any(), any());
    }

    @Test
    void registerWalker_WithoutCsrf_Forbidden() throws Exception {
        // When & Then
        mockMvc.perform(post("/api/walkers")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockCreateRequest)))
                .andExpect(status().isForbidden());

        verify(walkerService, never()).registerWalker(any(), any());
    }

    @Test
    @WithMockUser(username = USERNAME)
    void registerWalker_AlreadyExists() throws Exception {
        // Given
        when(walkerService.registerWalker(eq(USERNAME), any(WalkerCreateRequest.class)))
                .thenThrow(new RuntimeException("Walker profile already exists"));

        Authentication mockAuth = mock(Authentication.class);
        when(mockAuth.getName()).thenReturn(USERNAME);

        SecurityContext mockSecurityContext = mock(SecurityContext.class);
        when(mockSecurityContext.getAuthentication()).thenReturn(mockAuth);

        try (MockedStatic<SecurityContextHolder> securityContextHolderMock = mockStatic(SecurityContextHolder.class)) {
            securityContextHolderMock.when(SecurityContextHolder::getContext)
                    .thenReturn(mockSecurityContext);

            // When & Then
            mockMvc.perform(post("/api/walkers")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockCreateRequest))
                            .with(csrf()))
                    .andExpect(status().isInternalServerError());
        }

        verify(walkerService).registerWalker(eq(USERNAME), any(WalkerCreateRequest.class));
    }

    @Test
    @WithMockUser
    void getAllWalkers_EmptyResult() throws Exception {
        // Given
        when(walkerService.getAllWalkers(any(WalkerSearchRequest.class))).thenReturn(Arrays.asList());

        // When & Then
        mockMvc.perform(get("/api/walkers")
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(0));

        verify(walkerService).getAllWalkers(any(WalkerSearchRequest.class));
    }
}