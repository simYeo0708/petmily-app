package com.petmily.backend.api.admin.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.petmily.backend.api.walker.dto.walkerProfile.WalkerProfileResponse;
import com.petmily.backend.api.walker.service.WalkerService;
import com.petmily.backend.domain.walker.entity.WalkerStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(WalkerAdminController.class)
@ExtendWith(MockitoExtension.class)
class WalkerAdminControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private WalkerService walkerService;

    @Autowired
    private ObjectMapper objectMapper;

    private WalkerProfileResponse mockWalkerProfileResponse;

    private static final Long WALKER_ID = 1L;
    private static final Long USER_ID = 1L;

    @BeforeEach
    void setUp() {
        // Mock WalkerProfileResponse
        mockWalkerProfileResponse = WalkerProfileResponse.builder()
                .id(WALKER_ID)
                .userId(USER_ID)
                .username("testwalker")
                .name("Test Walker")
                .bio("Experienced dog walker with 5 years of experience")
                .experience("5+ years with dogs of all sizes")
                .availableTime("Mon-Fri 9-17, Weekends 10-16")
                .serviceArea("Gangnam-gu, Seoul")
                .status(WalkerStatus.ACTIVE)
                .rating(4.5)
                .totalWalks(150)
                .build();
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_ToActive_Success() throws Exception {
        // Given
        WalkerStatus newStatus = WalkerStatus.ACTIVE;
        WalkerProfileResponse updatedResponse = WalkerProfileResponse.builder()
                .id(WALKER_ID)
                .userId(USER_ID)
                .username("testwalker")
                .status(WalkerStatus.ACTIVE)
                .build();

        when(walkerService.updateWalkerStatus(WALKER_ID, newStatus))
                .thenReturn(updatedResponse);

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(WALKER_ID))
                .andExpect(jsonPath("$.status").value("ACTIVE"));

        verify(walkerService).updateWalkerStatus(WALKER_ID, newStatus);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_ToInactive_Success() throws Exception {
        // Given
        WalkerStatus newStatus = WalkerStatus.INACTIVE;
        WalkerProfileResponse updatedResponse = WalkerProfileResponse.builder()
                .id(WALKER_ID)
                .status(WalkerStatus.INACTIVE)
                .build();

        when(walkerService.updateWalkerStatus(WALKER_ID, newStatus))
                .thenReturn(updatedResponse);

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(WALKER_ID))
                .andExpect(jsonPath("$.status").value("INACTIVE"));

        verify(walkerService).updateWalkerStatus(WALKER_ID, newStatus);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_ToPending_Success() throws Exception {
        // Given
        WalkerStatus newStatus = WalkerStatus.PENDING;
        WalkerProfileResponse updatedResponse = WalkerProfileResponse.builder()
                .id(WALKER_ID)
                .status(WalkerStatus.PENDING)
                .build();

        when(walkerService.updateWalkerStatus(WALKER_ID, newStatus))
                .thenReturn(updatedResponse);

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.status").value("PENDING"));

        verify(walkerService).updateWalkerStatus(WALKER_ID, newStatus);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_ToSuspended_Success() throws Exception {
        // Given
        WalkerStatus newStatus = WalkerStatus.SUSPENDED;
        WalkerProfileResponse updatedResponse = WalkerProfileResponse.builder()
                .id(WALKER_ID)
                .status(WalkerStatus.SUSPENDED)
                .build();

        when(walkerService.updateWalkerStatus(WALKER_ID, newStatus))
                .thenReturn(updatedResponse);

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.status").value("SUSPENDED"));

        verify(walkerService).updateWalkerStatus(WALKER_ID, newStatus);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_WalkerNotFound() throws Exception {
        // Given
        WalkerStatus newStatus = WalkerStatus.ACTIVE;
        when(walkerService.updateWalkerStatus(WALKER_ID, newStatus))
                .thenThrow(new RuntimeException("Walker not found"));

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(walkerService).updateWalkerStatus(WALKER_ID, newStatus);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_InvalidStatus() throws Exception {
        // Given - invalid status parameter will cause binding error

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", "INVALID_STATUS")
                        .with(csrf()))
                .andExpect(status().isBadRequest());

        verify(walkerService, never()).updateWalkerStatus(eq(WALKER_ID), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_MissingStatusParameter() throws Exception {
        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .with(csrf()))
                .andExpect(status().isBadRequest());

        verify(walkerService, never()).updateWalkerStatus(eq(WALKER_ID), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_ServiceError() throws Exception {
        // Given
        WalkerStatus newStatus = WalkerStatus.ACTIVE;
        when(walkerService.updateWalkerStatus(WALKER_ID, newStatus))
                .thenThrow(new RuntimeException("Database connection error"));

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(walkerService).updateWalkerStatus(WALKER_ID, newStatus);
    }

    @Test
    @WithMockUser // Default USER role
    void updateWalkerStatus_Forbidden_NotAdmin() throws Exception {
        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", "ACTIVE")
                        .with(csrf()))
                .andExpect(status().isForbidden());

        verify(walkerService, never()).updateWalkerStatus(any(), any());
    }

    @Test
    void updateWalkerStatus_Unauthorized() throws Exception {
        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", "ACTIVE")
                        .with(csrf()))
                .andExpect(status().isUnauthorized());

        verify(walkerService, never()).updateWalkerStatus(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_WithoutCsrf_Forbidden() throws Exception {
        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", "ACTIVE"))
                .andExpect(status().isForbidden());

        verify(walkerService, never()).updateWalkerStatus(any(), any());
    }

    @Test
    @WithMockUser(roles = "USER") // Different role than ADMIN
    void updateWalkerStatus_Forbidden_WrongRole() throws Exception {
        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", "ACTIVE")
                        .with(csrf()))
                .andExpect(status().isForbidden());

        verify(walkerService, never()).updateWalkerStatus(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_InvalidWalkerId() throws Exception {
        // Given
        Long invalidId = -1L;
        WalkerStatus newStatus = WalkerStatus.ACTIVE;
        when(walkerService.updateWalkerStatus(invalidId, newStatus))
                .thenThrow(new RuntimeException("Invalid walker ID"));

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", invalidId)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(walkerService).updateWalkerStatus(invalidId, newStatus);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_AlreadyAtStatus() throws Exception {
        // Given
        WalkerStatus currentStatus = WalkerStatus.ACTIVE;
        when(walkerService.updateWalkerStatus(WALKER_ID, currentStatus))
                .thenThrow(new RuntimeException("Walker is already at this status"));

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", currentStatus.name())
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(walkerService).updateWalkerStatus(WALKER_ID, currentStatus);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateWalkerStatus_ValidateFullResponse() throws Exception {
        // Given
        WalkerStatus newStatus = WalkerStatus.ACTIVE;
        when(walkerService.updateWalkerStatus(WALKER_ID, newStatus))
                .thenReturn(mockWalkerProfileResponse);

        // When & Then
        mockMvc.perform(put("/api/admin/walkers/{id}/status", WALKER_ID)
                        .param("status", newStatus.name())
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(WALKER_ID))
                .andExpect(jsonPath("$.userId").value(USER_ID))
                .andExpect(jsonPath("$.username").value("testwalker"))
                .andExpect(jsonPath("$.name").value("Test Walker"))
                .andExpect(jsonPath("$.bio").value("Experienced dog walker with 5 years of experience"))
                .andExpect(jsonPath("$.experience").value("5+ years with dogs of all sizes"))
                .andExpect(jsonPath("$.serviceArea").value("Gangnam-gu, Seoul"))
                .andExpect(jsonPath("$.status").value("ACTIVE"))
                .andExpect(jsonPath("$.rating").value(4.5))
                .andExpect(jsonPath("$.totalWalks").value(150));

        verify(walkerService).updateWalkerStatus(WALKER_ID, newStatus);
    }
}