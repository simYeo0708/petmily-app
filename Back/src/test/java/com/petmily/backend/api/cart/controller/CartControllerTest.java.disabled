package com.petmily.backend.api.cart.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.petmily.backend.api.cart.dto.CartAddRequest;
import com.petmily.backend.api.cart.dto.CartResponse;
import com.petmily.backend.api.cart.dto.CartUpdateRequest;
import com.petmily.backend.api.cart.service.CartService;
import com.petmily.backend.api.common.util.SecurityUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.mockito.MockedStatic;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.Collections;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(CartController.class)
class CartControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private CartService cartService;

    @Autowired
    private ObjectMapper objectMapper;

    private CartResponse cartResponse;
    private CartAddRequest addRequest;
    private CartUpdateRequest updateRequest;

    @BeforeEach
    void setUp() {
        cartResponse = CartResponse.builder()
                .id(1L)
                .userId(1L)
                .totalPrice(25000.0)
                .totalItems(2)
                .items(Collections.emptyList())
                .build();

        addRequest = new CartAddRequest();
        addRequest.setProductId(1L);
        addRequest.setQuantity(2);

        updateRequest = new CartUpdateRequest();
        updateRequest.setQuantity(3);
    }

    @Test
    @WithMockUser(username = "testuser")
    void getCart_Success() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);
            when(cartService.getCart(1L)).thenReturn(cartResponse);

            mockMvc.perform(get("/api/carts")
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.id").value(1L))
                    .andExpect(jsonPath("$.userId").value(1L))
                    .andExpect(jsonPath("$.totalPrice").value(25000.0));
        }
    }

    @Test
    @WithMockUser(username = "testuser")
    void addToCart_Success() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);
            doNothing().when(cartService).addToCart(eq(1L), any(CartAddRequest.class));

            mockMvc.perform(post("/api/carts/items")
                            .with(csrf())
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(addRequest)))
                    .andExpect(status().isOk());

            verify(cartService).addToCart(eq(1L), any(CartAddRequest.class));
        }
    }

    @Test
    @WithMockUser(username = "testuser")
    void updateCartItem_Success() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);
            doNothing().when(cartService).updateCartItem(eq(1L), eq(1L), any(CartUpdateRequest.class));

            mockMvc.perform(put("/api/carts/items/1")
                            .with(csrf())
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(updateRequest)))
                    .andExpect(status().isOk());

            verify(cartService).updateCartItem(eq(1L), eq(1L), any(CartUpdateRequest.class));
        }
    }

    @Test
    @WithMockUser(username = "testuser")
    void removeCartItem_Success() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);
            doNothing().when(cartService).removeCartItem(1L, 1L);

            mockMvc.perform(delete("/api/carts/items/1")
                            .with(csrf())
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk());

            verify(cartService).removeCartItem(1L, 1L);
        }
    }

    @Test
    @WithMockUser(username = "testuser")
    void toggleCartItemSelection_Success() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);
            doNothing().when(cartService).toggleCartItemSelection(1L, 1L);

            mockMvc.perform(patch("/api/carts/items/1/select")
                            .with(csrf())
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk());

            verify(cartService).toggleCartItemSelection(1L, 1L);
        }
    }

    @Test
    @WithMockUser(username = "testuser")
    void clearCart_Success() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);
            doNothing().when(cartService).clearCart(1L);

            mockMvc.perform(delete("/api/carts")
                            .with(csrf())
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk());

            verify(cartService).clearCart(1L);
        }
    }

    @Test
    @WithMockUser(username = "testuser")
    void removeSelectedItems_Success() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);
            doNothing().when(cartService).removeSelectedItems(eq(1L), anyList());

            mockMvc.perform(delete("/api/carts/items")
                            .with(csrf())
                            .param("itemIds", "1", "2", "3")
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk());

            verify(cartService).removeSelectedItems(eq(1L), eq(Arrays.asList(1L, 2L, 3L)));
        }
    }

    @Test
    @WithMockUser(username = "testuser")
    void addToCart_WithInvalidData_ShouldReturnBadRequest() throws Exception {
        try (MockedStatic<SecurityUtils> securityUtils = mockStatic(SecurityUtils.class)) {
            securityUtils.when(() -> SecurityUtils.getUserId(any())).thenReturn(1L);

            CartAddRequest invalidRequest = new CartAddRequest();
            // Missing required fields

            mockMvc.perform(post("/api/carts/items")
                            .with(csrf())
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(invalidRequest)))
                    .andExpect(status().isBadRequest());
        }
    }
}