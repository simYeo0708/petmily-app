package com.petmily.backend.api.subscription.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.petmily.backend.api.common.util.SecurityUtils;
import com.petmily.backend.api.subscription.dto.*;
import com.petmily.backend.api.subscription.service.SubscriptionService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(SubscriptionController.class)
@ExtendWith(MockitoExtension.class)
class SubscriptionControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private SubscriptionService subscriptionService;

    @Autowired
    private ObjectMapper objectMapper;

    private SubscriptionListResponse mockListResponse;
    private SubscriptionDetailResponse mockDetailResponse;
    private SubscriptionCreateRequest mockCreateRequest;
    private SubscriptionUpdateRequest mockUpdateRequest;
    private SubscriptionHistoryResponse mockHistoryResponse;
    private static final Long USER_ID = 1L;
    private static final Long SUBSCRIPTION_ID = 1L;

    @BeforeEach
    void setUp() {
        // Mock list response
        mockListResponse = SubscriptionListResponse.builder()
                .subscriptions(Arrays.asList())
                .totalElements(0L)
                .totalPages(0)
                .currentPage(0)
                .build();

        // Mock detail response
        mockDetailResponse = SubscriptionDetailResponse.builder()
                .id(SUBSCRIPTION_ID)
                .subscriptionType("MONTHLY")
                .isActive(true)
                .nextDeliveryDate(LocalDate.now().plusDays(31))
                .deliveryIntervalDays(30)
                .receiverName("Test User")
                .receiverPhone("010-1234-5678")
                .shippingAddress("Test Address")
                .paymentMethod("CARD")
                .monthlyAmount(50000.0)
                .items(Arrays.asList())
                .build();

        // Mock create request
        mockCreateRequest = new SubscriptionCreateRequest();
        mockCreateRequest.setSubscriptionType("MONTHLY");
        mockCreateRequest.setFirstDeliveryDate(LocalDate.now().plusDays(1));
        mockCreateRequest.setReceiverName("Test User");
        mockCreateRequest.setReceiverPhone("010-1234-5678");
        mockCreateRequest.setShippingAddress("Test Address");
        mockCreateRequest.setPaymentMethod("CARD");
        SubscriptionCreateRequest.SubscriptionItem item = new SubscriptionCreateRequest.SubscriptionItem();
        item.setProductId(1L);
        item.setQuantity(2);
        mockCreateRequest.setItems(Arrays.asList(item));

        // Mock update request
        mockUpdateRequest = new SubscriptionUpdateRequest();
        mockUpdateRequest.setSubscriptionType("WEEKLY");
        mockUpdateRequest.setReceiverName("Updated User");

        // Mock history response
        mockHistoryResponse = SubscriptionHistoryResponse.builder()
                .history(Arrays.asList())
                .totalElements(0L)
                .totalPages(0)
                .currentPage(0)
                .build();
    }

    @Test
    @WithMockUser
    void getSubscriptions_Success() throws Exception {
        // Given
        Pageable pageable = PageRequest.of(0, 10);
        when(subscriptionService.getSubscriptions(eq(USER_ID), any(Pageable.class)))
                .thenReturn(mockListResponse);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(get("/api/subscriptions")
                            .param("page", "0")
                            .param("size", "10")
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.subscriptions").isArray())
                    .andExpect(jsonPath("$.totalElements").value(0))
                    .andExpect(jsonPath("$.totalPages").value(0))
                    .andExpect(jsonPath("$.currentPage").value(0));
        }

        verify(subscriptionService).getSubscriptions(eq(USER_ID), any(Pageable.class));
    }

    @Test
    @WithMockUser
    void getSubscription_Success() throws Exception {
        // Given
        when(subscriptionService.getSubscription(SUBSCRIPTION_ID, USER_ID))
                .thenReturn(mockDetailResponse);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(get("/api/subscriptions/{id}", SUBSCRIPTION_ID)
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(SUBSCRIPTION_ID))
                    .andExpect(jsonPath("$.subscriptionType").value("MONTHLY"))
                    .andExpect(jsonPath("$.isActive").value(true))
                    .andExpect(jsonPath("$.deliveryIntervalDays").value(30))
                    .andExpect(jsonPath("$.monthlyAmount").value(50000.0));
        }

        verify(subscriptionService).getSubscription(SUBSCRIPTION_ID, USER_ID);
    }

    @Test
    @WithMockUser
    void getSubscription_NotFound() throws Exception {
        // Given
        when(subscriptionService.getSubscription(SUBSCRIPTION_ID, USER_ID))
                .thenThrow(new RuntimeException("Subscription not found"));

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(get("/api/subscriptions/{id}", SUBSCRIPTION_ID)
                            .with(csrf()))
                    .andExpect(status().isInternalServerError());
        }

        verify(subscriptionService).getSubscription(SUBSCRIPTION_ID, USER_ID);
    }

    @Test
    @WithMockUser
    void createSubscription_Success() throws Exception {
        // Given
        when(subscriptionService.createSubscription(eq(USER_ID), any(SubscriptionCreateRequest.class)))
                .thenReturn(mockDetailResponse);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(post("/api/subscriptions")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockCreateRequest))
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(SUBSCRIPTION_ID))
                    .andExpect(jsonPath("$.subscriptionType").value("MONTHLY"));
        }

        verify(subscriptionService).createSubscription(eq(USER_ID), any(SubscriptionCreateRequest.class));
    }

    @Test
    @WithMockUser
    void createSubscription_InvalidRequest() throws Exception {
        // Given - empty request
        SubscriptionCreateRequest invalidRequest = new SubscriptionCreateRequest();

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(post("/api/subscriptions")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(invalidRequest))
                            .with(csrf()))
                    .andExpect(status().isBadRequest());
        }

        verify(subscriptionService, never()).createSubscription(any(), any());
    }

    @Test
    @WithMockUser
    void updateSubscription_Success() throws Exception {
        // Given
        when(subscriptionService.updateSubscription(eq(SUBSCRIPTION_ID), eq(USER_ID), any(SubscriptionUpdateRequest.class)))
                .thenReturn(mockDetailResponse);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(put("/api/subscriptions/{id}", SUBSCRIPTION_ID)
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(mockUpdateRequest))
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.id").value(SUBSCRIPTION_ID));
        }

        verify(subscriptionService).updateSubscription(eq(SUBSCRIPTION_ID), eq(USER_ID), any(SubscriptionUpdateRequest.class));
    }

    @Test
    @WithMockUser
    void pauseSubscription_Success() throws Exception {
        // Given
        LocalDate pauseUntil = LocalDate.now().plusDays(30);
        doNothing().when(subscriptionService).pauseSubscription(SUBSCRIPTION_ID, USER_ID, pauseUntil);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(put("/api/subscriptions/{id}/pause", SUBSCRIPTION_ID)
                            .param("pauseUntil", pauseUntil.toString())
                            .with(csrf()))
                    .andExpect(status().isOk());
        }

        verify(subscriptionService).pauseSubscription(SUBSCRIPTION_ID, USER_ID, pauseUntil);
    }

    @Test
    @WithMockUser
    void pauseSubscription_WithoutDate_Success() throws Exception {
        // Given
        doNothing().when(subscriptionService).pauseSubscription(SUBSCRIPTION_ID, USER_ID, null);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(put("/api/subscriptions/{id}/pause", SUBSCRIPTION_ID)
                            .with(csrf()))
                    .andExpect(status().isOk());
        }

        verify(subscriptionService).pauseSubscription(SUBSCRIPTION_ID, USER_ID, null);
    }

    @Test
    @WithMockUser
    void resumeSubscription_Success() throws Exception {
        // Given
        doNothing().when(subscriptionService).resumeSubscription(SUBSCRIPTION_ID, USER_ID);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(put("/api/subscriptions/{id}/resume", SUBSCRIPTION_ID)
                            .with(csrf()))
                    .andExpect(status().isOk());
        }

        verify(subscriptionService).resumeSubscription(SUBSCRIPTION_ID, USER_ID);
    }

    @Test
    @WithMockUser
    void cancelSubscription_Success() throws Exception {
        // Given
        doNothing().when(subscriptionService).cancelSubscription(SUBSCRIPTION_ID, USER_ID);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(delete("/api/subscriptions/{id}", SUBSCRIPTION_ID)
                            .with(csrf()))
                    .andExpect(status().isOk());
        }

        verify(subscriptionService).cancelSubscription(SUBSCRIPTION_ID, USER_ID);
    }

    @Test
    @WithMockUser
    void getSubscriptionHistory_Success() throws Exception {
        // Given
        when(subscriptionService.getSubscriptionHistory(eq(SUBSCRIPTION_ID), eq(USER_ID), any(Pageable.class)))
                .thenReturn(mockHistoryResponse);

        try (MockedStatic<SecurityUtils> securityUtilsMock = mockStatic(SecurityUtils.class)) {
            securityUtilsMock.when(() -> SecurityUtils.getUserId(any(UserDetails.class)))
                    .thenReturn(USER_ID);

            // When & Then
            mockMvc.perform(get("/api/subscriptions/{id}/history", SUBSCRIPTION_ID)
                            .param("page", "0")
                            .param("size", "10")
                            .with(csrf()))
                    .andExpect(status().isOk())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                    .andExpect(jsonPath("$.history").isArray())
                    .andExpect(jsonPath("$.totalElements").value(0))
                    .andExpect(jsonPath("$.totalPages").value(0))
                    .andExpect(jsonPath("$.currentPage").value(0));
        }

        verify(subscriptionService).getSubscriptionHistory(eq(SUBSCRIPTION_ID), eq(USER_ID), any(Pageable.class));
    }

    @Test
    void getSubscriptions_Unauthorized() throws Exception {
        // When & Then
        mockMvc.perform(get("/api/subscriptions")
                        .with(csrf()))
                .andExpect(status().isUnauthorized());

        verify(subscriptionService, never()).getSubscriptions(any(), any());
    }

    @Test
    void createSubscription_WithoutCsrf_Forbidden() throws Exception {
        // When & Then
        mockMvc.perform(post("/api/subscriptions")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockCreateRequest)))
                .andExpect(status().isForbidden());

        verify(subscriptionService, never()).createSubscription(any(), any());
    }
}