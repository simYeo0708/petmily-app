package com.petmily.backend.api.admin.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.petmily.backend.api.order.dto.AdminReplyRequest;
import com.petmily.backend.api.order.dto.ReviewDetailResponse;
import com.petmily.backend.api.order.service.OrderService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;
import java.util.Arrays;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(OrderAdminController.class)
@ExtendWith(MockitoExtension.class)
class OrderAdminControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OrderService orderService;

    @Autowired
    private ObjectMapper objectMapper;

    private AdminReplyRequest mockAdminReplyRequest;
    private ReviewDetailResponse mockReviewDetailResponse;

    private static final Long ORDER_ID = 1L;
    private static final Long REVIEW_ID = 1L;
    private static final Long PRODUCT_ID = 1L;
    private static final Long USER_ID = 1L;

    @BeforeEach
    void setUp() {
        // Mock AdminReplyRequest
        mockAdminReplyRequest = new AdminReplyRequest();
        mockAdminReplyRequest.setAdminReply("Thank you for your review. We will improve our service based on your feedback.");

        // Mock ReviewDetailResponse
        ReviewDetailResponse.ProductInfo productInfo = ReviewDetailResponse.ProductInfo.builder()
                .productId(PRODUCT_ID)
                .productName("Premium Dog Food")
                .productImage("/images/dog-food.jpg")
                .brand("Pet Brand")
                .build();

        ReviewDetailResponse.ReviewerInfo reviewerInfo = ReviewDetailResponse.ReviewerInfo.builder()
                .userId(USER_ID)
                .username("testuser")
                .profileImage("/images/profile.jpg")
                .isAnonymous(false)
                .totalReviewCount(15L)
                .build();

        mockReviewDetailResponse = ReviewDetailResponse.builder()
                .id(REVIEW_ID)
                .orderId(ORDER_ID)
                .orderItemId(1L)
                .productId(PRODUCT_ID)
                .userId(USER_ID)
                .rating(4)
                .content("Great product, my dog loves it!")
                .imageUrls(Arrays.asList("/images/review1.jpg", "/images/review2.jpg"))
                .isAnonymous(false)
                .helpfulCount(5)
                .adminReply("Thank you for your review. We will improve our service based on your feedback.")
                .adminReplyDate(LocalDateTime.now())
                .createTime(LocalDateTime.now().minusDays(1))
                .updateTime(LocalDateTime.now())
                .productInfo(productInfo)
                .reviewerInfo(reviewerInfo)
                .isHelpful(true)
                .build();
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void addAdminReply_Success() throws Exception {
        // Given
        when(orderService.addAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class)))
                .thenReturn(mockReviewDetailResponse);

        // When & Then
        mockMvc.perform(post("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockAdminReplyRequest))
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(REVIEW_ID))
                .andExpect(jsonPath("$.orderId").value(ORDER_ID))
                .andExpect(jsonPath("$.adminReply").value("Thank you for your review. We will improve our service based on your feedback."))
                .andExpect(jsonPath("$.adminReplyDate").exists())
                .andExpect(jsonPath("$.productInfo.productName").value("Premium Dog Food"))
                .andExpect(jsonPath("$.reviewerInfo.username").value("testuser"));

        verify(orderService).addAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class));
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void addAdminReply_InvalidRequest() throws Exception {
        // Given - empty admin reply
        AdminReplyRequest invalidRequest = new AdminReplyRequest();
        invalidRequest.setAdminReply("");

        // When & Then
        mockMvc.perform(post("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(invalidRequest))
                        .with(csrf()))
                .andExpect(status().isBadRequest());

        verify(orderService, never()).addAdminReplyToOrderReview(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void addAdminReply_TooLongReply() throws Exception {
        // Given - reply too long
        AdminReplyRequest invalidRequest = new AdminReplyRequest();
        String longReply = "A".repeat(501); // 501 characters
        invalidRequest.setAdminReply(longReply);

        // When & Then
        mockMvc.perform(post("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(invalidRequest))
                        .with(csrf()))
                .andExpect(status().isBadRequest());

        verify(orderService, never()).addAdminReplyToOrderReview(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void addAdminReply_ReviewNotFound() throws Exception {
        // Given
        when(orderService.addAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class)))
                .thenThrow(new RuntimeException("Review not found for order"));

        // When & Then
        mockMvc.perform(post("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockAdminReplyRequest))
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(orderService).addAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class));
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateAdminReply_Success() throws Exception {
        // Given
        AdminReplyRequest updateRequest = new AdminReplyRequest();
        updateRequest.setAdminReply("Updated admin reply: We have addressed your concerns.");

        ReviewDetailResponse updatedResponse = ReviewDetailResponse.builder()
                .id(REVIEW_ID)
                .orderId(ORDER_ID)
                .adminReply("Updated admin reply: We have addressed your concerns.")
                .adminReplyDate(LocalDateTime.now())
                .build();

        when(orderService.updateAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class)))
                .thenReturn(updatedResponse);

        // When & Then
        mockMvc.perform(put("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateRequest))
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(REVIEW_ID))
                .andExpect(jsonPath("$.orderId").value(ORDER_ID))
                .andExpect(jsonPath("$.adminReply").value("Updated admin reply: We have addressed your concerns."));

        verify(orderService).updateAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class));
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateAdminReply_InvalidRequest() throws Exception {
        // Given - null admin reply
        AdminReplyRequest invalidRequest = new AdminReplyRequest();
        invalidRequest.setAdminReply(null);

        // When & Then
        mockMvc.perform(put("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(invalidRequest))
                        .with(csrf()))
                .andExpect(status().isBadRequest());

        verify(orderService, never()).updateAdminReplyToOrderReview(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void deleteAdminReply_Success() throws Exception {
        // Given
        doNothing().when(orderService).deleteAdminReplyFromOrderReview(ORDER_ID);

        // When & Then
        mockMvc.perform(delete("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .with(csrf()))
                .andExpect(status().isOk());

        verify(orderService).deleteAdminReplyFromOrderReview(ORDER_ID);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void deleteAdminReply_ReviewNotFound() throws Exception {
        // Given
        doThrow(new RuntimeException("Review not found for order"))
                .when(orderService).deleteAdminReplyFromOrderReview(ORDER_ID);

        // When & Then
        mockMvc.perform(delete("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(orderService).deleteAdminReplyFromOrderReview(ORDER_ID);
    }

    @Test
    @WithMockUser // Default USER role
    void addAdminReply_Forbidden_NotAdmin() throws Exception {
        // When & Then
        mockMvc.perform(post("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockAdminReplyRequest))
                        .with(csrf()))
                .andExpect(status().isForbidden());

        verify(orderService, never()).addAdminReplyToOrderReview(any(), any());
    }

    @Test
    void addAdminReply_Unauthorized() throws Exception {
        // When & Then
        mockMvc.perform(post("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockAdminReplyRequest))
                        .with(csrf()))
                .andExpect(status().isUnauthorized());

        verify(orderService, never()).addAdminReplyToOrderReview(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void addAdminReply_WithoutCsrf_Forbidden() throws Exception {
        // When & Then
        mockMvc.perform(post("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockAdminReplyRequest)))
                .andExpect(status().isForbidden());

        verify(orderService, never()).addAdminReplyToOrderReview(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void updateAdminReply_ServiceError() throws Exception {
        // Given
        when(orderService.updateAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class)))
                .thenThrow(new RuntimeException("Database error"));

        // When & Then
        mockMvc.perform(put("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockAdminReplyRequest))
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(orderService).updateAdminReplyToOrderReview(eq(ORDER_ID), any(AdminReplyRequest.class));
    }

    @Test
    @WithMockUser(roles = "USER") // Different role than ADMIN
    void updateAdminReply_Forbidden_WrongRole() throws Exception {
        // When & Then
        mockMvc.perform(put("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(mockAdminReplyRequest))
                        .with(csrf()))
                .andExpect(status().isForbidden());

        verify(orderService, never()).updateAdminReplyToOrderReview(any(), any());
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    void deleteAdminReply_NoReplyExists() throws Exception {
        // Given
        doThrow(new RuntimeException("No admin reply exists for this review"))
                .when(orderService).deleteAdminReplyFromOrderReview(ORDER_ID);

        // When & Then
        mockMvc.perform(delete("/api/admin/orders/{orderId}/review/admin-reply", ORDER_ID)
                        .with(csrf()))
                .andExpect(status().isInternalServerError());

        verify(orderService).deleteAdminReplyFromOrderReview(ORDER_ID);
    }
}