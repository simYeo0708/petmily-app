// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         BigInt    @id @default(autoincrement()) @map("user_id")
  username   String?   @unique
  password   String?
  email      String?   @unique
  profile    String?
  name       String?
  phone      String?
  provider   String?
  providerId String?
  role       Role?
  createTime DateTime  @default(now())
  updateTime DateTime? @updatedAt

  // Embedded Address fields
  roadAddress   String?
  addressDetail String?
  zipCode       String?   @db.VarChar(10)

  // Relations
  pets              Pet[]
  orders            Order[]
  walkerProfile     WalkerProfile?
  reviews           Review[]
  reviewHelpfuls    ReviewHelpful[]
  emergencyContacts EmergencyContact[]
  notificationSetting NotificationSetting?
  favoriteWalkers   FavoriteWalker[]
  chatRooms         ChatRoom[]
  chatMessages      ChatMessage[]
  cartItems         CartItem[]
  returns           Return[]

  @@map("users")
}

model Pet {
  id                  BigInt        @id @default(autoincrement())
  name                String
  species             String
  breed               String?
  age                 Int?
  gender              String?
  personality         String?
  imageUrl            String?       @map("image_url")
  weight              Float?
  size                PetSize?
  isVaccinated        Boolean?      @default(false) @map("is_vaccinated")
  medicalConditions   String?       @map("medical_conditions")
  specialNotes        String?       @map("special_notes")
  activityLevel       ActivityLevel? @map("activity_level")
  favoriteActivities  String?       @map("favorite_activities")
  goodWithChildren    Boolean?      @map("good_with_children")
  goodWithOtherPets   Boolean?      @map("good_with_other_pets")
  isNeutered          Boolean?      @default(false) @map("is_neutered")
  userId              BigInt        @map("user_id")
  createTime          DateTime      @default(now())
  updateTime          DateTime?     @updatedAt

  user    User            @relation(fields: [userId], references: [id])
  bookings WalkerBooking[]

  @@map("pets")
}

model Category {
  id             BigInt     @id @default(autoincrement())
  name           String     @unique
  description    String?    @db.Text
  imageUrl       String?    @map("image_url")
  isActive       Boolean?   @default(true) @map("is_active")
  parentId       BigInt?    @map("parent_id")
  sortOrder      Int?       @default(0) @map("sort_order")
  iconUrl        String?    @map("icon_url")
  createTime     DateTime   @default(now())
  updateTime     DateTime?  @updatedAt

  parentCategory Category?    @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories  Category[]   @relation("SubCategories")
  products       Product[]

  @@map("categories")
}

model Product {
  id            BigInt    @id @default(autoincrement())
  name          String
  description   String?   @db.Text
  price         Float
  imageUrl      String?   @map("image_url")
  brand         String?
  weight        Float?
  dimensions    String?
  isActive      Boolean?  @default(true) @map("is_active")
  discountRate  Float?    @default(0.0) @map("discount_rate")
  ratingAverage Float?    @default(0.0) @map("rating_average")
  reviewCount   Int?      @default(0) @map("review_count")
  stock         Int       @default(0)
  categoryId    BigInt    @map("category_id")
  createTime    DateTime  @default(now())
  updateTime    DateTime? @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  cartItems  CartItem[]
  returnItems ReturnItem[]

  @@map("products")
}

model Order {
  id              BigInt          @id @default(autoincrement())
  userId          BigInt          @map("user_id")
  totalAmount     Decimal         @map("total_amount")
  status          OrderStatus     @default(PENDING)
  shippingAddress String          @db.Text @map("shipping_address")
  receiverName    String?         @map("receiver_name")
  receiverPhone   String?         @map("receiver_phone")
  deliveryMemo    String?         @map("delivery_memo")
  deliveryStatus  DeliveryStatus  @default(PREPARING) @map("delivery_status")
  trackingNumber  String?         @map("tracking_number")
  discountAmount  Decimal         @default(0) @map("discount_amount")
  deliveryFee     Decimal         @default(0) @map("delivery_fee")
  finalAmount     Decimal?        @map("final_amount")
  paymentMethod   String?         @map("payment_method")
  isSubscription  Boolean         @default(false) @map("is_subscription")
  createTime      DateTime        @default(now())
  updateTime      DateTime?       @updatedAt

  user              User                @relation(fields: [userId], references: [id])
  items             OrderItem[]
  subscriptionOrder SubscriptionOrder?
  reviews           Review[]
  returns           Return[]

  @@map("orders")
}

model OrderItem {
  id         BigInt    @id @default(autoincrement())
  orderId    BigInt    @map("order_id")
  productId  BigInt    @map("product_id")
  quantity   Int
  price      Decimal
  createTime DateTime  @default(now())
  updateTime DateTime? @updatedAt

  order       Order        @relation(fields: [orderId], references: [id])
  product     Product      @relation(fields: [productId], references: [id])
  reviews     Review[]
  returnItems ReturnItem[]

  @@map("order_items")
}

model WalkerProfile {
  id              BigInt         @id @default(autoincrement())
  userId          BigInt         @unique @map("user_id")
  bio             String?        @db.Text
  experience      String?        @db.Text
  rating          Float?         @default(0.0)
  hourlyRate      Float          @map("hourly_rate")
  status          WalkerStatus   @default(PENDING)
  location        String?
  profileImageUrl String?        @map("profile_image_url")
  totalWalks      Int?           @default(0) @map("total_walks")
  isAvailable     Boolean?       @default(true) @map("is_available")
  createTime      DateTime       @default(now())
  updateTime      DateTime?      @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  bookings        WalkerBooking[]
  reviews         WalkerReview[]
  favoriteWalkers FavoriteWalker[]
  chatRooms       ChatRoom[]

  @@map("walker_profiles")
}

model WalkerBooking {
  id                 BigInt        @id @default(autoincrement())
  userId             BigInt        @map("user_id")
  walkerId           BigInt        @map("walker_id")
  petId              BigInt        @map("pet_id")
  date               DateTime
  duration           Int
  status             BookingStatus @default(PENDING)
  totalPrice         Float         @map("total_price")
  notes              String?       @db.Text
  walkerLocation     String?       @map("walker_location")
  walkStartLocation  String?       @map("walk_start_location")
  walkEndLocation    String?       @map("walk_end_location")
  startPhotoUrl      String?       @map("start_photo_url")
  middlePhotoUrl     String?       @map("middle_photo_url")
  endPhotoUrl        String?       @map("end_photo_url")
  actualStartTime    DateTime?     @map("actual_start_time")
  actualEndTime      DateTime?     @map("actual_end_time")
  insuranceCovered   Boolean?      @default(true) @map("insurance_covered")
  emergencyContact   String?       @map("emergency_contact")
  isRegularPackage   Boolean?      @default(false) @map("is_regular_package")
  packageFrequency   String?       @map("package_frequency")
  bookingMethod      BookingMethod @default(WALKER_SELECTION) @map("booking_method")
  pickupLocation     String?       @map("pickup_location")
  pickupAddress      String?       @map("pickup_address")
  dropoffLocation    String?       @map("dropoff_location")
  dropoffAddress     String?       @map("dropoff_address")
  createTime         DateTime      @default(now())
  updateTime         DateTime?     @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  walker        WalkerProfile  @relation(fields: [walkerId], references: [id])
  pet           Pet            @relation(fields: [petId], references: [id])
  reviews       WalkerReview[]
  walkingTracks WalkingTrack[]
  chatRooms     ChatRoom[]

  @@map("walker_bookings")
}

model WalkerReview {
  id         BigInt    @id @default(autoincrement())
  walkerId   BigInt    @map("walker_id")
  userId     BigInt    @map("user_id")
  bookingId  BigInt    @map("booking_id")
  rating     Int
  comment    String?   @db.Text
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  walker  WalkerProfile @relation(fields: [walkerId], references: [id])
  booking WalkerBooking @relation(fields: [bookingId], references: [id])

  @@map("walker_reviews")
}

model ChatRoom {
  id         BigInt   @id @default(autoincrement())
  roomId     String   @unique @map("room_id")
  userId     BigInt   @map("user_id")
  walkerId   BigInt   @map("walker_id")
  bookingId  BigInt?  @map("booking_id")
  chatType   ChatType @default(PRE_BOOKING) @map("chat_type")
  isActive   Boolean  @default(true) @map("is_active")
  createTime DateTime @default(now())
  updateTime DateTime? @updatedAt

  user     User          @relation(fields: [userId], references: [id])
  walker   WalkerProfile @relation(fields: [walkerId], references: [id])
  booking  WalkerBooking? @relation(fields: [bookingId], references: [id])
  messages ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id                BigInt      @id @default(autoincrement())
  chatRoomId        BigInt      @map("chat_room_id")
  senderId          BigInt      @map("sender_id")
  messageType       MessageType @default(TEXT) @map("message_type")
  content           String?     @db.Text
  isSystemMessage   Boolean     @default(false) @map("is_system_message")
  bookingButtonData String?     @map("booking_button_data")
  isRead            Boolean     @default(false) @map("is_read")
  createTime        DateTime    @default(now())
  updateTime        DateTime?   @updatedAt

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
  sender   User     @relation(fields: [senderId], references: [id])

  @@map("chat_messages")
}

model AuthRefreshToken {
  id             BigInt    @id @default(autoincrement())
  token          String    @unique
  userId         BigInt    @map("user_id")
  expirationDate DateTime  @map("expiration_date")

  @@map("refresh_token")
}

model CartItem {
  id         BigInt    @id @default(autoincrement())
  userId     BigInt    @map("user_id")
  productId  BigInt    @map("product_id")
  quantity   Int
  isSelected Boolean   @default(true) @map("is_selected")
  createTime DateTime  @default(now())
  updateTime DateTime? @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Return {
  id                BigInt       @id @default(autoincrement())
  orderId           BigInt       @map("order_id")
  userId            BigInt       @map("user_id")
  reason            ReturnReason
  detailedReason    String       @db.Text @map("detailed_reason")
  status            ReturnStatus @default(REQUESTED)
  returnAmount      Decimal?     @map("return_amount")
  collectionAddress String?      @db.Text @map("collection_address")
  trackingNumber    String?      @map("tracking_number")
  adminMemo         String?      @db.Text @map("admin_memo")
  rejectionReason   String?      @db.Text @map("rejection_reason")
  refundMethod      String?      @map("refund_method")
  processedAt       DateTime?    @map("processed_at")
  refundedAt        DateTime?    @map("refunded_at")
  createTime        DateTime     @default(now())
  updateTime        DateTime?    @updatedAt

  order       Order        @relation(fields: [orderId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  returnItems ReturnItem[]

  @@map("returns")
}

model ReturnItem {
  id            BigInt    @id @default(autoincrement())
  returnId      BigInt    @map("return_id")
  orderItemId   BigInt    @map("order_item_id")
  productId     BigInt    @map("product_id")
  quantity      Int
  price         Decimal
  returnAmount  Decimal?  @map("return_amount")
  conditionNote String?   @db.Text @map("condition_note")
  createTime    DateTime  @default(now())
  updateTime    DateTime? @updatedAt

  returnRequest Return    @relation(fields: [returnId], references: [id])
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])

  @@map("return_items")
}

model Review {
  id             BigInt        @id @default(autoincrement())
  orderId        BigInt        @map("order_id")
  orderItemId    BigInt        @map("order_item_id")
  productId      BigInt        @map("product_id")
  userId         BigInt        @map("user_id")
  rating         Int
  content        String        @db.Text
  imageUrls      String[]      @map("image_urls")
  isAnonymous    Boolean       @default(false) @map("is_anonymous")
  helpfulCount   Int           @default(0) @map("helpful_count")
  adminReply     String?       @db.Text @map("admin_reply")
  adminReplyDate DateTime?     @map("admin_reply_date")
  createTime     DateTime      @default(now())
  updateTime     DateTime?     @updatedAt

  order          Order         @relation(fields: [orderId], references: [id])
  orderItem      OrderItem     @relation(fields: [orderItemId], references: [id])
  product        Product       @relation(fields: [productId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  helpfuls       ReviewHelpful[]

  @@map("reviews")
}

model ReviewHelpful {
  id         BigInt    @id @default(autoincrement())
  reviewId   BigInt    @map("review_id")
  userId     BigInt    @map("user_id")
  createTime DateTime  @default(now())
  updateTime DateTime? @updatedAt

  review Review @relation(fields: [reviewId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([reviewId, userId])
  @@map("review_helpful")
}

model SubscriptionOrder {
  id                   BigInt           @id @default(autoincrement())
  orderId              BigInt           @map("order_id")
  subscriptionType     SubscriptionType @map("subscription_type")
  nextDeliveryDate     DateTime?        @map("next_delivery_date")
  deliveryIntervalDays Int?             @map("delivery_interval_days")
  isActive             Boolean          @default(true) @map("is_active")
  pauseUntil           DateTime?        @map("pause_until")
  deliveryCount        Int              @default(0) @map("delivery_count")
  maxDeliveries        Int?             @map("max_deliveries")
  createTime           DateTime         @default(now())
  updateTime           DateTime?        @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("subscription_orders")
}

model EmergencyContact {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt    @map("user_id")
  contactName  String    @db.VarChar(50) @map("contact_name")
  phoneNumber  String    @db.VarChar(20) @map("phone_number")
  relationship String?   @db.VarChar(30)
  isPrimary    Boolean   @default(false) @map("is_primary")
  isActive     Boolean   @default(true) @map("is_active")
  createTime   DateTime  @default(now())
  updateTime   DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("emergency_contacts")
}

model FavoriteWalker {
  id         BigInt    @id @default(autoincrement())
  userId     BigInt    @map("user_id")
  walkerId   BigInt    @map("walker_id")
  note       String?   @db.VarChar(200)
  isActive   Boolean   @default(true) @map("is_active")
  createTime DateTime  @default(now())
  updateTime DateTime? @updatedAt

  user   User          @relation(fields: [userId], references: [id])
  walker WalkerProfile @relation(fields: [walkerId], references: [id])

  @@id([userId, walkerId])
  @@map("favorite_walkers")
}

model NotificationSetting {
  id                         BigInt    @id @default(autoincrement())
  userId                     BigInt    @unique @map("user_id")
  departureAlertEnabled      Boolean   @default(true) @map("departure_alert_enabled")
  departureDistanceThreshold Int       @default(200) @map("departure_distance_threshold")
  delayAlertEnabled          Boolean   @default(true) @map("delay_alert_enabled")
  delayTimeThreshold         Int       @default(10) @map("delay_time_threshold")
  walkStartNotification      Boolean   @default(true) @map("walk_start_notification")
  walkCompleteNotification   Boolean   @default(true) @map("walk_complete_notification")
  emergencyNotification      Boolean   @default(true) @map("emergency_notification")
  smsEnabled                 Boolean   @default(true) @map("sms_enabled")
  pushEnabled                Boolean   @default(true) @map("push_enabled")
  emailEnabled               Boolean   @default(false) @map("email_enabled")
  createTime                 DateTime  @default(now())
  updateTime                 DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("notification_settings")
}

model WalkingTrack {
  id        BigInt    @id @default(autoincrement())
  bookingId BigInt    @map("booking_id")
  latitude  Decimal   @db.Decimal(10, 7)
  longitude Decimal   @db.Decimal(10, 7)
  timestamp DateTime
  accuracy  Decimal?  @db.Decimal(5, 2)
  trackType TrackType
  speed     Decimal?  @db.Decimal(5, 2)
  altitude  Decimal?  @db.Decimal(5, 2)
  createTime DateTime @default(now())
  updateTime DateTime? @updatedAt

  booking WalkerBooking @relation(fields: [bookingId], references: [id])

  @@map("walking_tracks")
}

enum Role {
  USER
  WALKER
  ADMIN
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

enum ActivityLevel {
  LOW
  MODERATE
  HIGH
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PREPARING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

enum ReturnReason {
  DEFECTIVE
  DIFFERENT_FROM_DESCRIPTION
  SIZE_NOT_FIT
  WRONG_ITEM
  DAMAGED_DURING_DELIVERY
  SIMPLE_CHANGE_OF_MIND
  OTHER
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COLLECTED
  INSPECTED
  REFUNDED
  CANCELLED
}

enum SubscriptionType {
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum WalkerStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  WALKER_APPLIED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum BookingMethod {
  WALKER_SELECTION
  OPEN_REQUEST
}

enum ChatType {
  PRE_BOOKING
  POST_BOOKING
}

enum MessageType {
  TEXT
  SYSTEM
  BOOKING_CARD
  JOIN
  LEAVE
}

enum TrackType {
  START
  WALKING
  PAUSE
  RESUME
  END
}